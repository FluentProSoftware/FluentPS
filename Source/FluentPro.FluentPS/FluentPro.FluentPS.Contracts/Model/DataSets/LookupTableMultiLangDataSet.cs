using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace FluentPro.FluentPS.Proxy.Model.DataSets
{
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    // This type definition was generated by System.Data.Design.TypedDataSetSchemaImporterExtension schema importer extension.
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("LookupTableMultiLangDataSet")]
    public partial class LookupTableMultiLangDataSet : global::System.Data.DataSet
    {
        private LookupTablesDataTable tableLookupTables;

        private LookupTableMaskStructuresDataTable tableLookupTableMaskStructures;

        private LookupTableMaskValuesDataTable tableLookupTableMaskValues;

        private LookupTableStructuresDataTable tableLookupTableStructures;

        private LookupTableValuesDataTable tableLookupTableValues;

        private LookupTableLanguagesDataTable tableLookupTableLanguages;

        private global::System.Data.DataRelation relationLookupTablesLookupTableMaskStructures;

        private global::System.Data.DataRelation relationLookupTableMaskStructuresLookupTableMaskValues;

        private global::System.Data.DataRelation relationLookupTableStructuresLookupTableStructures;

        private global::System.Data.DataRelation relationLookupTablesLookupTableStructures;

        private global::System.Data.DataRelation relationLookupTableStructuresLookupTableValues;

        private global::System.Data.DataRelation relationLookupTablesLookupTableLanguages;

        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public LookupTableMultiLangDataSet()
        {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected LookupTableMultiLangDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) :
            base(info, context, false)
        {
            if ((this.IsBinarySerialized(info, context) == true))
            {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema))
            {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["LookupTables"] != null))
                {
                    base.Tables.Add(new LookupTablesDataTable(ds.Tables["LookupTables"]));
                }
                if ((ds.Tables["LookupTableMaskStructures"] != null))
                {
                    base.Tables.Add(new LookupTableMaskStructuresDataTable(ds.Tables["LookupTableMaskStructures"]));
                }
                if ((ds.Tables["LookupTableMaskValues"] != null))
                {
                    base.Tables.Add(new LookupTableMaskValuesDataTable(ds.Tables["LookupTableMaskValues"]));
                }
                if ((ds.Tables["LookupTableStructures"] != null))
                {
                    base.Tables.Add(new LookupTableStructuresDataTable(ds.Tables["LookupTableStructures"]));
                }
                if ((ds.Tables["LookupTableValues"] != null))
                {
                    base.Tables.Add(new LookupTableValuesDataTable(ds.Tables["LookupTableValues"]));
                }
                if ((ds.Tables["LookupTableLanguages"] != null))
                {
                    base.Tables.Add(new LookupTableLanguagesDataTable(ds.Tables["LookupTableLanguages"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else
            {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LookupTablesDataTable LookupTables
        {
            get
            {
                return this.tableLookupTables;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LookupTableMaskStructuresDataTable LookupTableMaskStructures
        {
            get
            {
                return this.tableLookupTableMaskStructures;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LookupTableMaskValuesDataTable LookupTableMaskValues
        {
            get
            {
                return this.tableLookupTableMaskValues;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LookupTableStructuresDataTable LookupTableStructures
        {
            get
            {
                return this.tableLookupTableStructures;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LookupTableValuesDataTable LookupTableValues
        {
            get
            {
                return this.tableLookupTableValues;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LookupTableLanguagesDataTable LookupTableLanguages
        {
            get
            {
                return this.tableLookupTableLanguages;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode
        {
            get
            {
                return this._schemaSerializationMode;
            }
            set
            {
                this._schemaSerializationMode = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables
        {
            get
            {
                return base.Tables;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations
        {
            get
            {
                return base.Relations;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void InitializeDerivedDataSet()
        {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public override global::System.Data.DataSet Clone()
        {
            LookupTableMultiLangDataSet cln = ((LookupTableMultiLangDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override bool ShouldSerializeTables()
        {
            return false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override bool ShouldSerializeRelations()
        {
            return false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader)
        {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema))
            {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["LookupTables"] != null))
                {
                    base.Tables.Add(new LookupTablesDataTable(ds.Tables["LookupTables"]));
                }
                if ((ds.Tables["LookupTableMaskStructures"] != null))
                {
                    base.Tables.Add(new LookupTableMaskStructuresDataTable(ds.Tables["LookupTableMaskStructures"]));
                }
                if ((ds.Tables["LookupTableMaskValues"] != null))
                {
                    base.Tables.Add(new LookupTableMaskValuesDataTable(ds.Tables["LookupTableMaskValues"]));
                }
                if ((ds.Tables["LookupTableStructures"] != null))
                {
                    base.Tables.Add(new LookupTableStructuresDataTable(ds.Tables["LookupTableStructures"]));
                }
                if ((ds.Tables["LookupTableValues"] != null))
                {
                    base.Tables.Add(new LookupTableValuesDataTable(ds.Tables["LookupTableValues"]));
                }
                if ((ds.Tables["LookupTableLanguages"] != null))
                {
                    base.Tables.Add(new LookupTableLanguagesDataTable(ds.Tables["LookupTableLanguages"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else
            {
                this.ReadXml(reader);
                this.InitVars();
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable()
        {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars()
        {
            this.InitVars(true);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars(bool initTable)
        {
            this.tableLookupTables = ((LookupTablesDataTable)(base.Tables["LookupTables"]));
            if ((initTable == true))
            {
                if ((this.tableLookupTables != null))
                {
                    this.tableLookupTables.InitVars();
                }
            }
            this.tableLookupTableMaskStructures = ((LookupTableMaskStructuresDataTable)(base.Tables["LookupTableMaskStructures"]));
            if ((initTable == true))
            {
                if ((this.tableLookupTableMaskStructures != null))
                {
                    this.tableLookupTableMaskStructures.InitVars();
                }
            }
            this.tableLookupTableMaskValues = ((LookupTableMaskValuesDataTable)(base.Tables["LookupTableMaskValues"]));
            if ((initTable == true))
            {
                if ((this.tableLookupTableMaskValues != null))
                {
                    this.tableLookupTableMaskValues.InitVars();
                }
            }
            this.tableLookupTableStructures = ((LookupTableStructuresDataTable)(base.Tables["LookupTableStructures"]));
            if ((initTable == true))
            {
                if ((this.tableLookupTableStructures != null))
                {
                    this.tableLookupTableStructures.InitVars();
                }
            }
            this.tableLookupTableValues = ((LookupTableValuesDataTable)(base.Tables["LookupTableValues"]));
            if ((initTable == true))
            {
                if ((this.tableLookupTableValues != null))
                {
                    this.tableLookupTableValues.InitVars();
                }
            }
            this.tableLookupTableLanguages = ((LookupTableLanguagesDataTable)(base.Tables["LookupTableLanguages"]));
            if ((initTable == true))
            {
                if ((this.tableLookupTableLanguages != null))
                {
                    this.tableLookupTableLanguages.InitVars();
                }
            }
            this.relationLookupTablesLookupTableMaskStructures = this.Relations["LookupTablesLookupTableMaskStructures"];
            this.relationLookupTableMaskStructuresLookupTableMaskValues = this.Relations["LookupTableMaskStructuresLookupTableMaskValues"];
            this.relationLookupTableStructuresLookupTableStructures = this.Relations["LookupTableStructuresLookupTableStructures"];
            this.relationLookupTablesLookupTableStructures = this.Relations["LookupTablesLookupTableStructures"];
            this.relationLookupTableStructuresLookupTableValues = this.Relations["LookupTableStructuresLookupTableValues"];
            this.relationLookupTablesLookupTableLanguages = this.Relations["LookupTablesLookupTableLanguages"];
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitClass()
        {
            this.DataSetName = "LookupTableMultiLangDataSet";
            this.Prefix = "";
            this.Namespace = "http://schemas.microsoft.com/office/project/server/webservices/LookupTableMultiLa" +
                "ngDataSet/";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableLookupTables = new LookupTablesDataTable();
            base.Tables.Add(this.tableLookupTables);
            this.tableLookupTableMaskStructures = new LookupTableMaskStructuresDataTable();
            base.Tables.Add(this.tableLookupTableMaskStructures);
            this.tableLookupTableMaskValues = new LookupTableMaskValuesDataTable();
            base.Tables.Add(this.tableLookupTableMaskValues);
            this.tableLookupTableStructures = new LookupTableStructuresDataTable();
            base.Tables.Add(this.tableLookupTableStructures);
            this.tableLookupTableValues = new LookupTableValuesDataTable();
            base.Tables.Add(this.tableLookupTableValues);
            this.tableLookupTableLanguages = new LookupTableLanguagesDataTable();
            base.Tables.Add(this.tableLookupTableLanguages);
            global::System.Data.ForeignKeyConstraint fkc;
            fkc = new global::System.Data.ForeignKeyConstraint("LookupTablesLookupTableMaskStructures", new global::System.Data.DataColumn[] {
                        this.tableLookupTables.LT_UIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableLookupTableMaskStructures.LT_UIDColumn});
            this.tableLookupTableMaskStructures.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("LookupTableMaskStructuresLookupTableMaskValues", new global::System.Data.DataColumn[] {
                        this.tableLookupTableMaskStructures.LT_UIDColumn,
                        this.tableLookupTableMaskStructures.LT_MASK_STRUCT_LEVELColumn}, new global::System.Data.DataColumn[] {
                        this.tableLookupTableMaskValues.LT_UIDColumn,
                        this.tableLookupTableMaskValues.LT_MASK_STRUCT_LEVELColumn});
            this.tableLookupTableMaskValues.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("LookupTableStructuresLookupTableStructures", new global::System.Data.DataColumn[] {
                        this.tableLookupTableStructures.LT_STRUCT_UIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableLookupTableStructures.LT_PARENT_STRUCT_UIDColumn});
            this.tableLookupTableStructures.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("LookupTablesLookupTableStructures", new global::System.Data.DataColumn[] {
                        this.tableLookupTables.LT_UIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableLookupTableStructures.LT_UIDColumn});
            this.tableLookupTableStructures.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("LookupTableStructuresLookupTableValues", new global::System.Data.DataColumn[] {
                        this.tableLookupTableStructures.LT_STRUCT_UIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableLookupTableValues.LT_STRUCT_UIDColumn});
            this.tableLookupTableValues.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("LookupTablesLookupTableLanguages", new global::System.Data.DataColumn[] {
                        this.tableLookupTables.LT_UIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableLookupTableLanguages.LT_UIDColumn});
            this.tableLookupTableLanguages.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            this.relationLookupTablesLookupTableMaskStructures = new global::System.Data.DataRelation("LookupTablesLookupTableMaskStructures", new global::System.Data.DataColumn[] {
                        this.tableLookupTables.LT_UIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableLookupTableMaskStructures.LT_UIDColumn}, false);
            this.Relations.Add(this.relationLookupTablesLookupTableMaskStructures);
            this.relationLookupTableMaskStructuresLookupTableMaskValues = new global::System.Data.DataRelation("LookupTableMaskStructuresLookupTableMaskValues", new global::System.Data.DataColumn[] {
                        this.tableLookupTableMaskStructures.LT_UIDColumn,
                        this.tableLookupTableMaskStructures.LT_MASK_STRUCT_LEVELColumn}, new global::System.Data.DataColumn[] {
                        this.tableLookupTableMaskValues.LT_UIDColumn,
                        this.tableLookupTableMaskValues.LT_MASK_STRUCT_LEVELColumn}, false);
            this.Relations.Add(this.relationLookupTableMaskStructuresLookupTableMaskValues);
            this.relationLookupTableStructuresLookupTableStructures = new global::System.Data.DataRelation("LookupTableStructuresLookupTableStructures", new global::System.Data.DataColumn[] {
                        this.tableLookupTableStructures.LT_STRUCT_UIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableLookupTableStructures.LT_PARENT_STRUCT_UIDColumn}, false);
            this.Relations.Add(this.relationLookupTableStructuresLookupTableStructures);
            this.relationLookupTablesLookupTableStructures = new global::System.Data.DataRelation("LookupTablesLookupTableStructures", new global::System.Data.DataColumn[] {
                        this.tableLookupTables.LT_UIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableLookupTableStructures.LT_UIDColumn}, false);
            this.Relations.Add(this.relationLookupTablesLookupTableStructures);
            this.relationLookupTableStructuresLookupTableValues = new global::System.Data.DataRelation("LookupTableStructuresLookupTableValues", new global::System.Data.DataColumn[] {
                        this.tableLookupTableStructures.LT_STRUCT_UIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableLookupTableValues.LT_STRUCT_UIDColumn}, false);
            this.Relations.Add(this.relationLookupTableStructuresLookupTableValues);
            this.relationLookupTablesLookupTableLanguages = new global::System.Data.DataRelation("LookupTablesLookupTableLanguages", new global::System.Data.DataColumn[] {
                        this.tableLookupTables.LT_UIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableLookupTableLanguages.LT_UIDColumn}, false);
            this.Relations.Add(this.relationLookupTablesLookupTableLanguages);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeLookupTables()
        {
            return false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeLookupTableMaskStructures()
        {
            return false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeLookupTableMaskValues()
        {
            return false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeLookupTableStructures()
        {
            return false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeLookupTableValues()
        {
            return false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeLookupTableLanguages()
        {
            return false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e)
        {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove))
            {
                this.InitVars();
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs)
        {
            LookupTableMultiLangDataSet ds = new LookupTableMultiLangDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace))
            {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try
                {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); )
                    {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length))
                        {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length)
                                        && (s1.ReadByte() == s2.ReadByte())); )
                            {
                                ;
                            }
                            if ((s1.Position == s1.Length))
                            {
                                return type;
                            }
                        }
                    }
                }
                finally
                {
                    if ((s1 != null))
                    {
                        s1.Close();
                    }
                    if ((s2 != null))
                    {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void LookupTablesRowChangeEventHandler(object sender, LookupTablesRowChangeEvent e);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void LookupTableMaskStructuresRowChangeEventHandler(object sender, LookupTableMaskStructuresRowChangeEvent e);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void LookupTableMaskValuesRowChangeEventHandler(object sender, LookupTableMaskValuesRowChangeEvent e);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void LookupTableStructuresRowChangeEventHandler(object sender, LookupTableStructuresRowChangeEvent e);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void LookupTableValuesRowChangeEventHandler(object sender, LookupTableValuesRowChangeEvent e);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void LookupTableLanguagesRowChangeEventHandler(object sender, LookupTableLanguagesRowChangeEvent e);

        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LookupTablesDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable
        {

            private global::System.Data.DataColumn columnLT_UID;

            private global::System.Data.DataColumn columnLT_NAME;

            private global::System.Data.DataColumn columnLT_SORT_ORDER_ENUM;

            private global::System.Data.DataColumn columnLT_PRIMARY_LCID;

            private global::System.Data.DataColumn columnLT_FILL_ALL_LEVELS;

            private global::System.Data.DataColumn columnLT_CHECKOUTBY;

            private global::System.Data.DataColumn columnLT_CHECKOUTDATE;

            private global::System.Data.DataColumn columnMOD_DATE;

            private global::System.Data.DataColumn columnAPP_ENTITY_UID;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public LookupTablesDataTable()
            {
                this.TableName = "LookupTables";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal LookupTablesDataTable(global::System.Data.DataTable table)
            {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive))
                {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
                {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace))
                {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected LookupTablesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
            {
                this.InitVars();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn LT_UIDColumn
            {
                get
                {
                    return this.columnLT_UID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn LT_NAMEColumn
            {
                get
                {
                    return this.columnLT_NAME;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn LT_SORT_ORDER_ENUMColumn
            {
                get
                {
                    return this.columnLT_SORT_ORDER_ENUM;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn LT_PRIMARY_LCIDColumn
            {
                get
                {
                    return this.columnLT_PRIMARY_LCID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn LT_FILL_ALL_LEVELSColumn
            {
                get
                {
                    return this.columnLT_FILL_ALL_LEVELS;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn LT_CHECKOUTBYColumn
            {
                get
                {
                    return this.columnLT_CHECKOUTBY;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn LT_CHECKOUTDATEColumn
            {
                get
                {
                    return this.columnLT_CHECKOUTDATE;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn MOD_DATEColumn
            {
                get
                {
                    return this.columnMOD_DATE;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn APP_ENTITY_UIDColumn
            {
                get
                {
                    return this.columnAPP_ENTITY_UID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public LookupTablesRow this[int index]
            {
                get
                {
                    return ((LookupTablesRow)(this.Rows[index]));
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event LookupTablesRowChangeEventHandler LookupTablesRowChanging;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event LookupTablesRowChangeEventHandler LookupTablesRowChanged;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event LookupTablesRowChangeEventHandler LookupTablesRowDeleting;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event LookupTablesRowChangeEventHandler LookupTablesRowDeleted;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddLookupTablesRow(LookupTablesRow row)
            {
                this.Rows.Add(row);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public LookupTablesRow AddLookupTablesRow(Guid LT_UID, string LT_NAME, byte LT_SORT_ORDER_ENUM, int LT_PRIMARY_LCID, bool LT_FILL_ALL_LEVELS, Guid LT_CHECKOUTBY, System.DateTime LT_CHECKOUTDATE, System.DateTime MOD_DATE, Guid APP_ENTITY_UID)
            {
                LookupTablesRow rowLookupTablesRow = ((LookupTablesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        LT_UID,
                        LT_NAME,
                        LT_SORT_ORDER_ENUM,
                        LT_PRIMARY_LCID,
                        LT_FILL_ALL_LEVELS,
                        LT_CHECKOUTBY,
                        LT_CHECKOUTDATE,
                        MOD_DATE,
                        APP_ENTITY_UID};
                rowLookupTablesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLookupTablesRow);
                return rowLookupTablesRow;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public LookupTablesRow FindByLT_UID(Guid LT_UID)
            {
                return ((LookupTablesRow)(this.Rows.Find(new object[] {
                            LT_UID})));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public virtual global::System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone()
            {
                LookupTablesDataTable cln = ((LookupTablesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance()
            {
                return new LookupTablesDataTable();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars()
            {
                this.columnLT_UID = base.Columns["LT_UID"];
                this.columnLT_NAME = base.Columns["LT_NAME"];
                this.columnLT_SORT_ORDER_ENUM = base.Columns["LT_SORT_ORDER_ENUM"];
                this.columnLT_PRIMARY_LCID = base.Columns["LT_PRIMARY_LCID"];
                this.columnLT_FILL_ALL_LEVELS = base.Columns["LT_FILL_ALL_LEVELS"];
                this.columnLT_CHECKOUTBY = base.Columns["LT_CHECKOUTBY"];
                this.columnLT_CHECKOUTDATE = base.Columns["LT_CHECKOUTDATE"];
                this.columnMOD_DATE = base.Columns["MOD_DATE"];
                this.columnAPP_ENTITY_UID = base.Columns["APP_ENTITY_UID"];
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass()
            {
                this.columnLT_UID = new global::System.Data.DataColumn("LT_UID", typeof(Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLT_UID);
                this.columnLT_NAME = new global::System.Data.DataColumn("LT_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLT_NAME);
                this.columnLT_SORT_ORDER_ENUM = new global::System.Data.DataColumn("LT_SORT_ORDER_ENUM", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLT_SORT_ORDER_ENUM);
                this.columnLT_PRIMARY_LCID = new global::System.Data.DataColumn("LT_PRIMARY_LCID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLT_PRIMARY_LCID);
                this.columnLT_FILL_ALL_LEVELS = new global::System.Data.DataColumn("LT_FILL_ALL_LEVELS", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLT_FILL_ALL_LEVELS);
                this.columnLT_CHECKOUTBY = new global::System.Data.DataColumn("LT_CHECKOUTBY", typeof(Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLT_CHECKOUTBY);
                this.columnLT_CHECKOUTDATE = new global::System.Data.DataColumn("LT_CHECKOUTDATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLT_CHECKOUTDATE);
                this.columnMOD_DATE = new global::System.Data.DataColumn("MOD_DATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMOD_DATE);
                this.columnAPP_ENTITY_UID = new global::System.Data.DataColumn("APP_ENTITY_UID", typeof(Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAPP_ENTITY_UID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("LookupTableMultiLangDataSetKey1", new global::System.Data.DataColumn[] {
                                this.columnLT_UID}, true));
                this.columnLT_UID.AllowDBNull = false;
                this.columnLT_UID.Unique = true;
                this.columnLT_NAME.AllowDBNull = false;
                this.columnLT_PRIMARY_LCID.AllowDBNull = false;
                this.columnLT_FILL_ALL_LEVELS.DefaultValue = ((bool)(false));
                this.columnLT_CHECKOUTBY.ReadOnly = true;
                this.columnLT_CHECKOUTDATE.ReadOnly = true;
                this.columnMOD_DATE.ReadOnly = true;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public LookupTablesRow NewLookupTablesRow()
            {
                return ((LookupTablesRow)(this.NewRow()));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder)
            {
                return new LookupTablesRow(builder);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType()
            {
                return typeof(LookupTablesRow);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.LookupTablesRowChanged != null))
                {
                    this.LookupTablesRowChanged(this, new LookupTablesRowChangeEvent(((LookupTablesRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.LookupTablesRowChanging != null))
                {
                    this.LookupTablesRowChanging(this, new LookupTablesRowChangeEvent(((LookupTablesRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.LookupTablesRowDeleted != null))
                {
                    this.LookupTablesRowDeleted(this, new LookupTablesRowChangeEvent(((LookupTablesRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.LookupTablesRowDeleting != null))
                {
                    this.LookupTablesRowDeleting(this, new LookupTablesRowChangeEvent(((LookupTablesRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveLookupTablesRow(LookupTablesRow row)
            {
                this.Rows.Remove(row);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs)
            {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                LookupTableMultiLangDataSet ds = new LookupTableMultiLangDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LookupTablesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try
                    {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); )
                        {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length))
                            {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length)
                                            && (s1.ReadByte() == s2.ReadByte())); )
                                {
                                    ;
                                }
                                if ((s1.Position == s1.Length))
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if ((s1 != null))
                        {
                            s1.Close();
                        }
                        if ((s2 != null))
                        {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LookupTableMaskStructuresDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable
        {

            private global::System.Data.DataColumn columnLT_UID;

            private global::System.Data.DataColumn columnLT_MASK_STRUCT_LEVEL;

            private global::System.Data.DataColumn columnLT_MASK_STRUCT_TYPE_ENUM;

            private global::System.Data.DataColumn columnLT_MASK_STRUCT_LENGTH;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public LookupTableMaskStructuresDataTable()
            {
                this.TableName = "LookupTableMaskStructures";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal LookupTableMaskStructuresDataTable(global::System.Data.DataTable table)
            {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive))
                {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
                {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace))
                {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected LookupTableMaskStructuresDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
            {
                this.InitVars();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn LT_UIDColumn
            {
                get
                {
                    return this.columnLT_UID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn LT_MASK_STRUCT_LEVELColumn
            {
                get
                {
                    return this.columnLT_MASK_STRUCT_LEVEL;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn LT_MASK_STRUCT_TYPE_ENUMColumn
            {
                get
                {
                    return this.columnLT_MASK_STRUCT_TYPE_ENUM;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn LT_MASK_STRUCT_LENGTHColumn
            {
                get
                {
                    return this.columnLT_MASK_STRUCT_LENGTH;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public LookupTableMaskStructuresRow this[int index]
            {
                get
                {
                    return ((LookupTableMaskStructuresRow)(this.Rows[index]));
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event LookupTableMaskStructuresRowChangeEventHandler LookupTableMaskStructuresRowChanging;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event LookupTableMaskStructuresRowChangeEventHandler LookupTableMaskStructuresRowChanged;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event LookupTableMaskStructuresRowChangeEventHandler LookupTableMaskStructuresRowDeleting;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event LookupTableMaskStructuresRowChangeEventHandler LookupTableMaskStructuresRowDeleted;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddLookupTableMaskStructuresRow(LookupTableMaskStructuresRow row)
            {
                this.Rows.Add(row);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public LookupTableMaskStructuresRow AddLookupTableMaskStructuresRow(LookupTablesRow parentLookupTablesRowByLookupTablesLookupTableMaskStructures, int LT_MASK_STRUCT_LEVEL, byte LT_MASK_STRUCT_TYPE_ENUM, int LT_MASK_STRUCT_LENGTH)
            {
                LookupTableMaskStructuresRow rowLookupTableMaskStructuresRow = ((LookupTableMaskStructuresRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        LT_MASK_STRUCT_LEVEL,
                        LT_MASK_STRUCT_TYPE_ENUM,
                        LT_MASK_STRUCT_LENGTH};
                if ((parentLookupTablesRowByLookupTablesLookupTableMaskStructures != null))
                {
                    columnValuesArray[0] = parentLookupTablesRowByLookupTablesLookupTableMaskStructures[0];
                }
                rowLookupTableMaskStructuresRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLookupTableMaskStructuresRow);
                return rowLookupTableMaskStructuresRow;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public LookupTableMaskStructuresRow FindByLT_UIDLT_MASK_STRUCT_LEVEL(Guid LT_UID, int LT_MASK_STRUCT_LEVEL)
            {
                return ((LookupTableMaskStructuresRow)(this.Rows.Find(new object[] {
                            LT_UID,
                            LT_MASK_STRUCT_LEVEL})));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public virtual global::System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone()
            {
                LookupTableMaskStructuresDataTable cln = ((LookupTableMaskStructuresDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance()
            {
                return new LookupTableMaskStructuresDataTable();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars()
            {
                this.columnLT_UID = base.Columns["LT_UID"];
                this.columnLT_MASK_STRUCT_LEVEL = base.Columns["LT_MASK_STRUCT_LEVEL"];
                this.columnLT_MASK_STRUCT_TYPE_ENUM = base.Columns["LT_MASK_STRUCT_TYPE_ENUM"];
                this.columnLT_MASK_STRUCT_LENGTH = base.Columns["LT_MASK_STRUCT_LENGTH"];
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass()
            {
                this.columnLT_UID = new global::System.Data.DataColumn("LT_UID", typeof(Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLT_UID);
                this.columnLT_MASK_STRUCT_LEVEL = new global::System.Data.DataColumn("LT_MASK_STRUCT_LEVEL", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLT_MASK_STRUCT_LEVEL);
                this.columnLT_MASK_STRUCT_TYPE_ENUM = new global::System.Data.DataColumn("LT_MASK_STRUCT_TYPE_ENUM", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLT_MASK_STRUCT_TYPE_ENUM);
                this.columnLT_MASK_STRUCT_LENGTH = new global::System.Data.DataColumn("LT_MASK_STRUCT_LENGTH", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLT_MASK_STRUCT_LENGTH);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("LookupTableMultiLangDataSetKey2", new global::System.Data.DataColumn[] {
                                this.columnLT_UID,
                                this.columnLT_MASK_STRUCT_LEVEL}, true));
                this.columnLT_UID.AllowDBNull = false;
                this.columnLT_MASK_STRUCT_LEVEL.AllowDBNull = false;
                this.columnLT_MASK_STRUCT_LENGTH.DefaultValue = ((int)(0));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public LookupTableMaskStructuresRow NewLookupTableMaskStructuresRow()
            {
                return ((LookupTableMaskStructuresRow)(this.NewRow()));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder)
            {
                return new LookupTableMaskStructuresRow(builder);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType()
            {
                return typeof(LookupTableMaskStructuresRow);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.LookupTableMaskStructuresRowChanged != null))
                {
                    this.LookupTableMaskStructuresRowChanged(this, new LookupTableMaskStructuresRowChangeEvent(((LookupTableMaskStructuresRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.LookupTableMaskStructuresRowChanging != null))
                {
                    this.LookupTableMaskStructuresRowChanging(this, new LookupTableMaskStructuresRowChangeEvent(((LookupTableMaskStructuresRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.LookupTableMaskStructuresRowDeleted != null))
                {
                    this.LookupTableMaskStructuresRowDeleted(this, new LookupTableMaskStructuresRowChangeEvent(((LookupTableMaskStructuresRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.LookupTableMaskStructuresRowDeleting != null))
                {
                    this.LookupTableMaskStructuresRowDeleting(this, new LookupTableMaskStructuresRowChangeEvent(((LookupTableMaskStructuresRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveLookupTableMaskStructuresRow(LookupTableMaskStructuresRow row)
            {
                this.Rows.Remove(row);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs)
            {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                LookupTableMultiLangDataSet ds = new LookupTableMultiLangDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LookupTableMaskStructuresDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try
                    {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); )
                        {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length))
                            {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length)
                                            && (s1.ReadByte() == s2.ReadByte())); )
                                {
                                    ;
                                }
                                if ((s1.Position == s1.Length))
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if ((s1 != null))
                        {
                            s1.Close();
                        }
                        if ((s2 != null))
                        {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LookupTableMaskValuesDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable
        {

            private global::System.Data.DataColumn columnLT_UID;

            private global::System.Data.DataColumn columnLT_MASK_VALUE_SEPARATOR;

            private global::System.Data.DataColumn columnLT_MASK_STRUCT_LEVEL;

            private global::System.Data.DataColumn columnLCID;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public LookupTableMaskValuesDataTable()
            {
                this.TableName = "LookupTableMaskValues";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal LookupTableMaskValuesDataTable(global::System.Data.DataTable table)
            {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive))
                {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
                {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace))
                {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected LookupTableMaskValuesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
            {
                this.InitVars();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn LT_UIDColumn
            {
                get
                {
                    return this.columnLT_UID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn LT_MASK_VALUE_SEPARATORColumn
            {
                get
                {
                    return this.columnLT_MASK_VALUE_SEPARATOR;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn LT_MASK_STRUCT_LEVELColumn
            {
                get
                {
                    return this.columnLT_MASK_STRUCT_LEVEL;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn LCIDColumn
            {
                get
                {
                    return this.columnLCID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public LookupTableMaskValuesRow this[int index]
            {
                get
                {
                    return ((LookupTableMaskValuesRow)(this.Rows[index]));
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event LookupTableMaskValuesRowChangeEventHandler LookupTableMaskValuesRowChanging;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event LookupTableMaskValuesRowChangeEventHandler LookupTableMaskValuesRowChanged;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event LookupTableMaskValuesRowChangeEventHandler LookupTableMaskValuesRowDeleting;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event LookupTableMaskValuesRowChangeEventHandler LookupTableMaskValuesRowDeleted;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddLookupTableMaskValuesRow(LookupTableMaskValuesRow row)
            {
                this.Rows.Add(row);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public LookupTableMaskValuesRow AddLookupTableMaskValuesRow(Guid LT_UID, string LT_MASK_VALUE_SEPARATOR, int LT_MASK_STRUCT_LEVEL, int LCID)
            {
                LookupTableMaskValuesRow rowLookupTableMaskValuesRow = ((LookupTableMaskValuesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        LT_UID,
                        LT_MASK_VALUE_SEPARATOR,
                        LT_MASK_STRUCT_LEVEL,
                        LCID};
                rowLookupTableMaskValuesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLookupTableMaskValuesRow);
                return rowLookupTableMaskValuesRow;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public LookupTableMaskValuesRow FindByLT_UIDLT_MASK_STRUCT_LEVELLCID(Guid LT_UID, int LT_MASK_STRUCT_LEVEL, int LCID)
            {
                return ((LookupTableMaskValuesRow)(this.Rows.Find(new object[] {
                            LT_UID,
                            LT_MASK_STRUCT_LEVEL,
                            LCID})));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public virtual global::System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone()
            {
                LookupTableMaskValuesDataTable cln = ((LookupTableMaskValuesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance()
            {
                return new LookupTableMaskValuesDataTable();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars()
            {
                this.columnLT_UID = base.Columns["LT_UID"];
                this.columnLT_MASK_VALUE_SEPARATOR = base.Columns["LT_MASK_VALUE_SEPARATOR"];
                this.columnLT_MASK_STRUCT_LEVEL = base.Columns["LT_MASK_STRUCT_LEVEL"];
                this.columnLCID = base.Columns["LCID"];
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass()
            {
                this.columnLT_UID = new global::System.Data.DataColumn("LT_UID", typeof(Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLT_UID);
                this.columnLT_MASK_VALUE_SEPARATOR = new global::System.Data.DataColumn("LT_MASK_VALUE_SEPARATOR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLT_MASK_VALUE_SEPARATOR);
                this.columnLT_MASK_STRUCT_LEVEL = new global::System.Data.DataColumn("LT_MASK_STRUCT_LEVEL", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLT_MASK_STRUCT_LEVEL);
                this.columnLCID = new global::System.Data.DataColumn("LCID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLCID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("LookupTableMultiLangDataSetKey3", new global::System.Data.DataColumn[] {
                                this.columnLT_UID,
                                this.columnLT_MASK_STRUCT_LEVEL,
                                this.columnLCID}, true));
                this.columnLT_UID.AllowDBNull = false;
                this.columnLT_MASK_VALUE_SEPARATOR.DefaultValue = ((string)(""));
                this.columnLT_MASK_STRUCT_LEVEL.AllowDBNull = false;
                this.columnLCID.AllowDBNull = false;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public LookupTableMaskValuesRow NewLookupTableMaskValuesRow()
            {
                return ((LookupTableMaskValuesRow)(this.NewRow()));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder)
            {
                return new LookupTableMaskValuesRow(builder);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType()
            {
                return typeof(LookupTableMaskValuesRow);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.LookupTableMaskValuesRowChanged != null))
                {
                    this.LookupTableMaskValuesRowChanged(this, new LookupTableMaskValuesRowChangeEvent(((LookupTableMaskValuesRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.LookupTableMaskValuesRowChanging != null))
                {
                    this.LookupTableMaskValuesRowChanging(this, new LookupTableMaskValuesRowChangeEvent(((LookupTableMaskValuesRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.LookupTableMaskValuesRowDeleted != null))
                {
                    this.LookupTableMaskValuesRowDeleted(this, new LookupTableMaskValuesRowChangeEvent(((LookupTableMaskValuesRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.LookupTableMaskValuesRowDeleting != null))
                {
                    this.LookupTableMaskValuesRowDeleting(this, new LookupTableMaskValuesRowChangeEvent(((LookupTableMaskValuesRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveLookupTableMaskValuesRow(LookupTableMaskValuesRow row)
            {
                this.Rows.Remove(row);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs)
            {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                LookupTableMultiLangDataSet ds = new LookupTableMultiLangDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LookupTableMaskValuesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try
                    {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); )
                        {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length))
                            {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length)
                                            && (s1.ReadByte() == s2.ReadByte())); )
                                {
                                    ;
                                }
                                if ((s1.Position == s1.Length))
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if ((s1 != null))
                        {
                            s1.Close();
                        }
                        if ((s2 != null))
                        {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LookupTableStructuresDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable
        {

            private global::System.Data.DataColumn columnLT_STRUCT_UID;

            private global::System.Data.DataColumn columnLT_UID;

            private global::System.Data.DataColumn columnLT_PARENT_STRUCT_UID;

            private global::System.Data.DataColumn columnLT_STRUCT_COOKIE;

            private global::System.Data.DataColumn columnAPP_ENTITY_UID;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public LookupTableStructuresDataTable()
            {
                this.TableName = "LookupTableStructures";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal LookupTableStructuresDataTable(global::System.Data.DataTable table)
            {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive))
                {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
                {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace))
                {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected LookupTableStructuresDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
            {
                this.InitVars();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn LT_STRUCT_UIDColumn
            {
                get
                {
                    return this.columnLT_STRUCT_UID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn LT_UIDColumn
            {
                get
                {
                    return this.columnLT_UID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn LT_PARENT_STRUCT_UIDColumn
            {
                get
                {
                    return this.columnLT_PARENT_STRUCT_UID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn LT_STRUCT_COOKIEColumn
            {
                get
                {
                    return this.columnLT_STRUCT_COOKIE;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn APP_ENTITY_UIDColumn
            {
                get
                {
                    return this.columnAPP_ENTITY_UID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public LookupTableStructuresRow this[int index]
            {
                get
                {
                    return ((LookupTableStructuresRow)(this.Rows[index]));
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event LookupTableStructuresRowChangeEventHandler LookupTableStructuresRowChanging;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event LookupTableStructuresRowChangeEventHandler LookupTableStructuresRowChanged;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event LookupTableStructuresRowChangeEventHandler LookupTableStructuresRowDeleting;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event LookupTableStructuresRowChangeEventHandler LookupTableStructuresRowDeleted;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddLookupTableStructuresRow(LookupTableStructuresRow row)
            {
                this.Rows.Add(row);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public LookupTableStructuresRow AddLookupTableStructuresRow(Guid LT_STRUCT_UID, LookupTablesRow parentLookupTablesRowByLookupTablesLookupTableStructures, LookupTableStructuresRow parentLookupTableStructuresRowByLookupTableStructuresLookupTableStructures, string LT_STRUCT_COOKIE, Guid APP_ENTITY_UID)
            {
                LookupTableStructuresRow rowLookupTableStructuresRow = ((LookupTableStructuresRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        LT_STRUCT_UID,
                        null,
                        null,
                        LT_STRUCT_COOKIE,
                        APP_ENTITY_UID};
                if ((parentLookupTablesRowByLookupTablesLookupTableStructures != null))
                {
                    columnValuesArray[1] = parentLookupTablesRowByLookupTablesLookupTableStructures[0];
                }
                if ((parentLookupTableStructuresRowByLookupTableStructuresLookupTableStructures != null))
                {
                    columnValuesArray[2] = parentLookupTableStructuresRowByLookupTableStructuresLookupTableStructures[0];
                }
                rowLookupTableStructuresRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLookupTableStructuresRow);
                return rowLookupTableStructuresRow;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public LookupTableStructuresRow FindByLT_STRUCT_UID(Guid LT_STRUCT_UID)
            {
                return ((LookupTableStructuresRow)(this.Rows.Find(new object[] {
                            LT_STRUCT_UID})));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public virtual global::System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone()
            {
                LookupTableStructuresDataTable cln = ((LookupTableStructuresDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance()
            {
                return new LookupTableStructuresDataTable();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars()
            {
                this.columnLT_STRUCT_UID = base.Columns["LT_STRUCT_UID"];
                this.columnLT_UID = base.Columns["LT_UID"];
                this.columnLT_PARENT_STRUCT_UID = base.Columns["LT_PARENT_STRUCT_UID"];
                this.columnLT_STRUCT_COOKIE = base.Columns["LT_STRUCT_COOKIE"];
                this.columnAPP_ENTITY_UID = base.Columns["APP_ENTITY_UID"];
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass()
            {
                this.columnLT_STRUCT_UID = new global::System.Data.DataColumn("LT_STRUCT_UID", typeof(Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLT_STRUCT_UID);
                this.columnLT_UID = new global::System.Data.DataColumn("LT_UID", typeof(Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLT_UID);
                this.columnLT_PARENT_STRUCT_UID = new global::System.Data.DataColumn("LT_PARENT_STRUCT_UID", typeof(Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLT_PARENT_STRUCT_UID);
                this.columnLT_STRUCT_COOKIE = new global::System.Data.DataColumn("LT_STRUCT_COOKIE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLT_STRUCT_COOKIE);
                this.columnAPP_ENTITY_UID = new global::System.Data.DataColumn("APP_ENTITY_UID", typeof(Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAPP_ENTITY_UID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("LookupTableMultiLangDataSetKey4", new global::System.Data.DataColumn[] {
                                this.columnLT_STRUCT_UID}, true));
                this.columnLT_STRUCT_UID.AllowDBNull = false;
                this.columnLT_STRUCT_UID.Unique = true;
                this.columnLT_UID.AllowDBNull = false;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public LookupTableStructuresRow NewLookupTableStructuresRow()
            {
                return ((LookupTableStructuresRow)(this.NewRow()));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder)
            {
                return new LookupTableStructuresRow(builder);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType()
            {
                return typeof(LookupTableStructuresRow);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.LookupTableStructuresRowChanged != null))
                {
                    this.LookupTableStructuresRowChanged(this, new LookupTableStructuresRowChangeEvent(((LookupTableStructuresRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.LookupTableStructuresRowChanging != null))
                {
                    this.LookupTableStructuresRowChanging(this, new LookupTableStructuresRowChangeEvent(((LookupTableStructuresRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.LookupTableStructuresRowDeleted != null))
                {
                    this.LookupTableStructuresRowDeleted(this, new LookupTableStructuresRowChangeEvent(((LookupTableStructuresRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.LookupTableStructuresRowDeleting != null))
                {
                    this.LookupTableStructuresRowDeleting(this, new LookupTableStructuresRowChangeEvent(((LookupTableStructuresRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveLookupTableStructuresRow(LookupTableStructuresRow row)
            {
                this.Rows.Remove(row);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs)
            {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                LookupTableMultiLangDataSet ds = new LookupTableMultiLangDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LookupTableStructuresDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try
                    {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); )
                        {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length))
                            {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length)
                                            && (s1.ReadByte() == s2.ReadByte())); )
                                {
                                    ;
                                }
                                if ((s1.Position == s1.Length))
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if ((s1 != null))
                        {
                            s1.Close();
                        }
                        if ((s2 != null))
                        {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LookupTableValuesDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable
        {

            private global::System.Data.DataColumn columnLT_STRUCT_UID;

            private global::System.Data.DataColumn columnLCID;

            private global::System.Data.DataColumn columnLT_UID;

            private global::System.Data.DataColumn columnLT_VALUE_DUR;

            private global::System.Data.DataColumn columnLT_VALUE_NUM;

            private global::System.Data.DataColumn columnLT_VALUE_DUR_FMT;

            private global::System.Data.DataColumn columnLT_VALUE_DATE;

            private global::System.Data.DataColumn columnLT_VALUE_TEXT;

            private global::System.Data.DataColumn columnLT_VALUE_DEFAULT_WEIGHT;

            private global::System.Data.DataColumn columnLT_VALUE_DEFAULT_BACK_COLOR;

            private global::System.Data.DataColumn columnLT_VALUE_DEFAULT_FORE_COLOR;

            private global::System.Data.DataColumn columnLT_VALUE_PHONETIC;

            private global::System.Data.DataColumn columnLT_VALUE_FULL;

            private global::System.Data.DataColumn columnLT_VALUE_DESC;

            private global::System.Data.DataColumn columnLT_VALUE_SORT_INDEX;

            private global::System.Data.DataColumn columnLT_VALUE_LOCALIZED_COOKIE;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public LookupTableValuesDataTable()
            {
                this.TableName = "LookupTableValues";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal LookupTableValuesDataTable(global::System.Data.DataTable table)
            {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive))
                {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
                {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace))
                {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected LookupTableValuesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
            {
                this.InitVars();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn LT_STRUCT_UIDColumn
            {
                get
                {
                    return this.columnLT_STRUCT_UID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn LCIDColumn
            {
                get
                {
                    return this.columnLCID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn LT_UIDColumn
            {
                get
                {
                    return this.columnLT_UID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn LT_VALUE_DURColumn
            {
                get
                {
                    return this.columnLT_VALUE_DUR;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn LT_VALUE_NUMColumn
            {
                get
                {
                    return this.columnLT_VALUE_NUM;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn LT_VALUE_DUR_FMTColumn
            {
                get
                {
                    return this.columnLT_VALUE_DUR_FMT;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn LT_VALUE_DATEColumn
            {
                get
                {
                    return this.columnLT_VALUE_DATE;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn LT_VALUE_TEXTColumn
            {
                get
                {
                    return this.columnLT_VALUE_TEXT;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn LT_VALUE_DEFAULT_WEIGHTColumn
            {
                get
                {
                    return this.columnLT_VALUE_DEFAULT_WEIGHT;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn LT_VALUE_DEFAULT_BACK_COLORColumn
            {
                get
                {
                    return this.columnLT_VALUE_DEFAULT_BACK_COLOR;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn LT_VALUE_DEFAULT_FORE_COLORColumn
            {
                get
                {
                    return this.columnLT_VALUE_DEFAULT_FORE_COLOR;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn LT_VALUE_PHONETICColumn
            {
                get
                {
                    return this.columnLT_VALUE_PHONETIC;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn LT_VALUE_FULLColumn
            {
                get
                {
                    return this.columnLT_VALUE_FULL;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn LT_VALUE_DESCColumn
            {
                get
                {
                    return this.columnLT_VALUE_DESC;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn LT_VALUE_SORT_INDEXColumn
            {
                get
                {
                    return this.columnLT_VALUE_SORT_INDEX;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn LT_VALUE_LOCALIZED_COOKIEColumn
            {
                get
                {
                    return this.columnLT_VALUE_LOCALIZED_COOKIE;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public LookupTableValuesRow this[int index]
            {
                get
                {
                    return ((LookupTableValuesRow)(this.Rows[index]));
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event LookupTableValuesRowChangeEventHandler LookupTableValuesRowChanging;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event LookupTableValuesRowChangeEventHandler LookupTableValuesRowChanged;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event LookupTableValuesRowChangeEventHandler LookupTableValuesRowDeleting;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event LookupTableValuesRowChangeEventHandler LookupTableValuesRowDeleted;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddLookupTableValuesRow(LookupTableValuesRow row)
            {
                this.Rows.Add(row);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public LookupTableValuesRow AddLookupTableValuesRow(
                        LookupTableStructuresRow parentLookupTableStructuresRowByLookupTableStructuresLookupTableValues,
                        int LCID,
                        Guid LT_UID,
                        int LT_VALUE_DUR,
                        decimal LT_VALUE_NUM,
                        byte LT_VALUE_DUR_FMT,
                        System.DateTime LT_VALUE_DATE,
                        string LT_VALUE_TEXT,
                        double LT_VALUE_DEFAULT_WEIGHT,
                        int LT_VALUE_DEFAULT_BACK_COLOR,
                        int LT_VALUE_DEFAULT_FORE_COLOR,
                        string LT_VALUE_PHONETIC,
                        string LT_VALUE_FULL,
                        string LT_VALUE_DESC,
                        decimal LT_VALUE_SORT_INDEX,
                        string LT_VALUE_LOCALIZED_COOKIE)
            {
                LookupTableValuesRow rowLookupTableValuesRow = ((LookupTableValuesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        LCID,
                        LT_UID,
                        LT_VALUE_DUR,
                        LT_VALUE_NUM,
                        LT_VALUE_DUR_FMT,
                        LT_VALUE_DATE,
                        LT_VALUE_TEXT,
                        LT_VALUE_DEFAULT_WEIGHT,
                        LT_VALUE_DEFAULT_BACK_COLOR,
                        LT_VALUE_DEFAULT_FORE_COLOR,
                        LT_VALUE_PHONETIC,
                        LT_VALUE_FULL,
                        LT_VALUE_DESC,
                        LT_VALUE_SORT_INDEX,
                        LT_VALUE_LOCALIZED_COOKIE};
                if ((parentLookupTableStructuresRowByLookupTableStructuresLookupTableValues != null))
                {
                    columnValuesArray[0] = parentLookupTableStructuresRowByLookupTableStructuresLookupTableValues[0];
                }
                rowLookupTableValuesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLookupTableValuesRow);
                return rowLookupTableValuesRow;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public LookupTableValuesRow FindByLT_STRUCT_UIDLCID(Guid LT_STRUCT_UID, int LCID)
            {
                return ((LookupTableValuesRow)(this.Rows.Find(new object[] {
                            LT_STRUCT_UID,
                            LCID})));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public virtual global::System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone()
            {
                LookupTableValuesDataTable cln = ((LookupTableValuesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance()
            {
                return new LookupTableValuesDataTable();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars()
            {
                this.columnLT_STRUCT_UID = base.Columns["LT_STRUCT_UID"];
                this.columnLCID = base.Columns["LCID"];
                this.columnLT_UID = base.Columns["LT_UID"];
                this.columnLT_VALUE_DUR = base.Columns["LT_VALUE_DUR"];
                this.columnLT_VALUE_NUM = base.Columns["LT_VALUE_NUM"];
                this.columnLT_VALUE_DUR_FMT = base.Columns["LT_VALUE_DUR_FMT"];
                this.columnLT_VALUE_DATE = base.Columns["LT_VALUE_DATE"];
                this.columnLT_VALUE_TEXT = base.Columns["LT_VALUE_TEXT"];
                this.columnLT_VALUE_DEFAULT_WEIGHT = base.Columns["LT_VALUE_DEFAULT_WEIGHT"];
                this.columnLT_VALUE_DEFAULT_BACK_COLOR = base.Columns["LT_VALUE_DEFAULT_BACK_COLOR"];
                this.columnLT_VALUE_DEFAULT_FORE_COLOR = base.Columns["LT_VALUE_DEFAULT_FORE_COLOR"];
                this.columnLT_VALUE_PHONETIC = base.Columns["LT_VALUE_PHONETIC"];
                this.columnLT_VALUE_FULL = base.Columns["LT_VALUE_FULL"];
                this.columnLT_VALUE_DESC = base.Columns["LT_VALUE_DESC"];
                this.columnLT_VALUE_SORT_INDEX = base.Columns["LT_VALUE_SORT_INDEX"];
                this.columnLT_VALUE_LOCALIZED_COOKIE = base.Columns["LT_VALUE_LOCALIZED_COOKIE"];
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass()
            {
                this.columnLT_STRUCT_UID = new global::System.Data.DataColumn("LT_STRUCT_UID", typeof(Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLT_STRUCT_UID);
                this.columnLCID = new global::System.Data.DataColumn("LCID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLCID);
                this.columnLT_UID = new global::System.Data.DataColumn("LT_UID", typeof(Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLT_UID);
                this.columnLT_VALUE_DUR = new global::System.Data.DataColumn("LT_VALUE_DUR", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLT_VALUE_DUR);
                this.columnLT_VALUE_NUM = new global::System.Data.DataColumn("LT_VALUE_NUM", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLT_VALUE_NUM);
                this.columnLT_VALUE_DUR_FMT = new global::System.Data.DataColumn("LT_VALUE_DUR_FMT", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLT_VALUE_DUR_FMT);
                this.columnLT_VALUE_DATE = new global::System.Data.DataColumn("LT_VALUE_DATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLT_VALUE_DATE);
                this.columnLT_VALUE_TEXT = new global::System.Data.DataColumn("LT_VALUE_TEXT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLT_VALUE_TEXT);
                this.columnLT_VALUE_DEFAULT_WEIGHT = new global::System.Data.DataColumn("LT_VALUE_DEFAULT_WEIGHT", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLT_VALUE_DEFAULT_WEIGHT);
                this.columnLT_VALUE_DEFAULT_BACK_COLOR = new global::System.Data.DataColumn("LT_VALUE_DEFAULT_BACK_COLOR", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLT_VALUE_DEFAULT_BACK_COLOR);
                this.columnLT_VALUE_DEFAULT_FORE_COLOR = new global::System.Data.DataColumn("LT_VALUE_DEFAULT_FORE_COLOR", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLT_VALUE_DEFAULT_FORE_COLOR);
                this.columnLT_VALUE_PHONETIC = new global::System.Data.DataColumn("LT_VALUE_PHONETIC", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLT_VALUE_PHONETIC);
                this.columnLT_VALUE_FULL = new global::System.Data.DataColumn("LT_VALUE_FULL", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLT_VALUE_FULL);
                this.columnLT_VALUE_DESC = new global::System.Data.DataColumn("LT_VALUE_DESC", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLT_VALUE_DESC);
                this.columnLT_VALUE_SORT_INDEX = new global::System.Data.DataColumn("LT_VALUE_SORT_INDEX", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLT_VALUE_SORT_INDEX);
                this.columnLT_VALUE_LOCALIZED_COOKIE = new global::System.Data.DataColumn("LT_VALUE_LOCALIZED_COOKIE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLT_VALUE_LOCALIZED_COOKIE);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("LookupTableMultiLangDataSetKey5", new global::System.Data.DataColumn[] {
                                this.columnLT_STRUCT_UID,
                                this.columnLCID}, true));
                this.columnLT_STRUCT_UID.AllowDBNull = false;
                this.columnLCID.AllowDBNull = false;
                this.columnLT_VALUE_FULL.ReadOnly = true;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public LookupTableValuesRow NewLookupTableValuesRow()
            {
                return ((LookupTableValuesRow)(this.NewRow()));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder)
            {
                return new LookupTableValuesRow(builder);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType()
            {
                return typeof(LookupTableValuesRow);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.LookupTableValuesRowChanged != null))
                {
                    this.LookupTableValuesRowChanged(this, new LookupTableValuesRowChangeEvent(((LookupTableValuesRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.LookupTableValuesRowChanging != null))
                {
                    this.LookupTableValuesRowChanging(this, new LookupTableValuesRowChangeEvent(((LookupTableValuesRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.LookupTableValuesRowDeleted != null))
                {
                    this.LookupTableValuesRowDeleted(this, new LookupTableValuesRowChangeEvent(((LookupTableValuesRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.LookupTableValuesRowDeleting != null))
                {
                    this.LookupTableValuesRowDeleting(this, new LookupTableValuesRowChangeEvent(((LookupTableValuesRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveLookupTableValuesRow(LookupTableValuesRow row)
            {
                this.Rows.Remove(row);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs)
            {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                LookupTableMultiLangDataSet ds = new LookupTableMultiLangDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LookupTableValuesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try
                    {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); )
                        {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length))
                            {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length)
                                            && (s1.ReadByte() == s2.ReadByte())); )
                                {
                                    ;
                                }
                                if ((s1.Position == s1.Length))
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if ((s1 != null))
                        {
                            s1.Close();
                        }
                        if ((s2 != null))
                        {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LookupTableLanguagesDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable
        {

            private global::System.Data.DataColumn columnLT_UID;

            private global::System.Data.DataColumn columnLCID;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public LookupTableLanguagesDataTable()
            {
                this.TableName = "LookupTableLanguages";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal LookupTableLanguagesDataTable(global::System.Data.DataTable table)
            {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive))
                {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
                {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace))
                {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected LookupTableLanguagesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
            {
                this.InitVars();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn LT_UIDColumn
            {
                get
                {
                    return this.columnLT_UID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn LCIDColumn
            {
                get
                {
                    return this.columnLCID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public LookupTableLanguagesRow this[int index]
            {
                get
                {
                    return ((LookupTableLanguagesRow)(this.Rows[index]));
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event LookupTableLanguagesRowChangeEventHandler LookupTableLanguagesRowChanging;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event LookupTableLanguagesRowChangeEventHandler LookupTableLanguagesRowChanged;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event LookupTableLanguagesRowChangeEventHandler LookupTableLanguagesRowDeleting;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event LookupTableLanguagesRowChangeEventHandler LookupTableLanguagesRowDeleted;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddLookupTableLanguagesRow(LookupTableLanguagesRow row)
            {
                this.Rows.Add(row);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public LookupTableLanguagesRow AddLookupTableLanguagesRow(LookupTablesRow parentLookupTablesRowByLookupTablesLookupTableLanguages, int LCID)
            {
                LookupTableLanguagesRow rowLookupTableLanguagesRow = ((LookupTableLanguagesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        LCID};
                if ((parentLookupTablesRowByLookupTablesLookupTableLanguages != null))
                {
                    columnValuesArray[0] = parentLookupTablesRowByLookupTablesLookupTableLanguages[0];
                }
                rowLookupTableLanguagesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLookupTableLanguagesRow);
                return rowLookupTableLanguagesRow;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public LookupTableLanguagesRow FindByLT_UIDLCID(Guid LT_UID, int LCID)
            {
                return ((LookupTableLanguagesRow)(this.Rows.Find(new object[] {
                            LT_UID,
                            LCID})));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public virtual global::System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone()
            {
                LookupTableLanguagesDataTable cln = ((LookupTableLanguagesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance()
            {
                return new LookupTableLanguagesDataTable();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars()
            {
                this.columnLT_UID = base.Columns["LT_UID"];
                this.columnLCID = base.Columns["LCID"];
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass()
            {
                this.columnLT_UID = new global::System.Data.DataColumn("LT_UID", typeof(Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLT_UID);
                this.columnLCID = new global::System.Data.DataColumn("LCID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLCID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("LookupTableMultiLangDataSetKey6", new global::System.Data.DataColumn[] {
                                this.columnLT_UID,
                                this.columnLCID}, true));
                this.columnLT_UID.AllowDBNull = false;
                this.columnLCID.AllowDBNull = false;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public LookupTableLanguagesRow NewLookupTableLanguagesRow()
            {
                return ((LookupTableLanguagesRow)(this.NewRow()));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder)
            {
                return new LookupTableLanguagesRow(builder);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType()
            {
                return typeof(LookupTableLanguagesRow);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.LookupTableLanguagesRowChanged != null))
                {
                    this.LookupTableLanguagesRowChanged(this, new LookupTableLanguagesRowChangeEvent(((LookupTableLanguagesRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.LookupTableLanguagesRowChanging != null))
                {
                    this.LookupTableLanguagesRowChanging(this, new LookupTableLanguagesRowChangeEvent(((LookupTableLanguagesRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.LookupTableLanguagesRowDeleted != null))
                {
                    this.LookupTableLanguagesRowDeleted(this, new LookupTableLanguagesRowChangeEvent(((LookupTableLanguagesRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.LookupTableLanguagesRowDeleting != null))
                {
                    this.LookupTableLanguagesRowDeleting(this, new LookupTableLanguagesRowChangeEvent(((LookupTableLanguagesRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveLookupTableLanguagesRow(LookupTableLanguagesRow row)
            {
                this.Rows.Remove(row);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs)
            {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                LookupTableMultiLangDataSet ds = new LookupTableMultiLangDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LookupTableLanguagesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try
                    {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); )
                        {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length))
                            {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length)
                                            && (s1.ReadByte() == s2.ReadByte())); )
                                {
                                    ;
                                }
                                if ((s1.Position == s1.Length))
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if ((s1 != null))
                        {
                            s1.Close();
                        }
                        if ((s2 != null))
                        {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class LookupTablesRow : global::System.Data.DataRow
        {

            private LookupTablesDataTable tableLookupTables;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal LookupTablesRow(global::System.Data.DataRowBuilder rb) :
                base(rb)
            {
                this.tableLookupTables = ((LookupTablesDataTable)(this.Table));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Guid LT_UID
            {
                get
                {
                    return ((Guid)(this[this.tableLookupTables.LT_UIDColumn]));
                }
                set
                {
                    this[this.tableLookupTables.LT_UIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string LT_NAME
            {
                get
                {
                    return ((string)(this[this.tableLookupTables.LT_NAMEColumn]));
                }
                set
                {
                    this[this.tableLookupTables.LT_NAMEColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public byte LT_SORT_ORDER_ENUM
            {
                get
                {
                    try
                    {
                        return ((byte)(this[this.tableLookupTables.LT_SORT_ORDER_ENUMColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'LT_SORT_ORDER_ENUM\' in table \'LookupTables\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableLookupTables.LT_SORT_ORDER_ENUMColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int LT_PRIMARY_LCID
            {
                get
                {
                    return ((int)(this[this.tableLookupTables.LT_PRIMARY_LCIDColumn]));
                }
                set
                {
                    this[this.tableLookupTables.LT_PRIMARY_LCIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool LT_FILL_ALL_LEVELS
            {
                get
                {
                    try
                    {
                        return ((bool)(this[this.tableLookupTables.LT_FILL_ALL_LEVELSColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'LT_FILL_ALL_LEVELS\' in table \'LookupTables\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableLookupTables.LT_FILL_ALL_LEVELSColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Guid LT_CHECKOUTBY
            {
                get
                {
                    try
                    {
                        return ((Guid)(this[this.tableLookupTables.LT_CHECKOUTBYColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'LT_CHECKOUTBY\' in table \'LookupTables\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableLookupTables.LT_CHECKOUTBYColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime LT_CHECKOUTDATE
            {
                get
                {
                    try
                    {
                        return ((global::System.DateTime)(this[this.tableLookupTables.LT_CHECKOUTDATEColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'LT_CHECKOUTDATE\' in table \'LookupTables\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableLookupTables.LT_CHECKOUTDATEColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime MOD_DATE
            {
                get
                {
                    try
                    {
                        return ((global::System.DateTime)(this[this.tableLookupTables.MOD_DATEColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'MOD_DATE\' in table \'LookupTables\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableLookupTables.MOD_DATEColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Guid APP_ENTITY_UID
            {
                get
                {
                    try
                    {
                        return ((Guid)(this[this.tableLookupTables.APP_ENTITY_UIDColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'APP_ENTITY_UID\' in table \'LookupTables\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableLookupTables.APP_ENTITY_UIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsLT_SORT_ORDER_ENUMNull()
            {
                return this.IsNull(this.tableLookupTables.LT_SORT_ORDER_ENUMColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetLT_SORT_ORDER_ENUMNull()
            {
                this[this.tableLookupTables.LT_SORT_ORDER_ENUMColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsLT_FILL_ALL_LEVELSNull()
            {
                return this.IsNull(this.tableLookupTables.LT_FILL_ALL_LEVELSColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetLT_FILL_ALL_LEVELSNull()
            {
                this[this.tableLookupTables.LT_FILL_ALL_LEVELSColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsLT_CHECKOUTBYNull()
            {
                return this.IsNull(this.tableLookupTables.LT_CHECKOUTBYColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetLT_CHECKOUTBYNull()
            {
                this[this.tableLookupTables.LT_CHECKOUTBYColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsLT_CHECKOUTDATENull()
            {
                return this.IsNull(this.tableLookupTables.LT_CHECKOUTDATEColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetLT_CHECKOUTDATENull()
            {
                this[this.tableLookupTables.LT_CHECKOUTDATEColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsMOD_DATENull()
            {
                return this.IsNull(this.tableLookupTables.MOD_DATEColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetMOD_DATENull()
            {
                this[this.tableLookupTables.MOD_DATEColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsAPP_ENTITY_UIDNull()
            {
                return this.IsNull(this.tableLookupTables.APP_ENTITY_UIDColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetAPP_ENTITY_UIDNull()
            {
                this[this.tableLookupTables.APP_ENTITY_UIDColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public LookupTableLanguagesRow[] GetLookupTableLanguagesRows()
            {
                if ((this.Table.ChildRelations["LookupTablesLookupTableLanguages"] == null))
                {
                    return new LookupTableLanguagesRow[0];
                }
                else
                {
                    return ((LookupTableLanguagesRow[])(base.GetChildRows(this.Table.ChildRelations["LookupTablesLookupTableLanguages"])));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public LookupTableStructuresRow[] GetLookupTableStructuresRows()
            {
                if ((this.Table.ChildRelations["LookupTablesLookupTableStructures"] == null))
                {
                    return new LookupTableStructuresRow[0];
                }
                else
                {
                    return ((LookupTableStructuresRow[])(base.GetChildRows(this.Table.ChildRelations["LookupTablesLookupTableStructures"])));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public LookupTableMaskStructuresRow[] GetLookupTableMaskStructuresRows()
            {
                if ((this.Table.ChildRelations["LookupTablesLookupTableMaskStructures"] == null))
                {
                    return new LookupTableMaskStructuresRow[0];
                }
                else
                {
                    return ((LookupTableMaskStructuresRow[])(base.GetChildRows(this.Table.ChildRelations["LookupTablesLookupTableMaskStructures"])));
                }
            }
        }

        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class LookupTableMaskStructuresRow : global::System.Data.DataRow
        {

            private LookupTableMaskStructuresDataTable tableLookupTableMaskStructures;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal LookupTableMaskStructuresRow(global::System.Data.DataRowBuilder rb) :
                base(rb)
            {
                this.tableLookupTableMaskStructures = ((LookupTableMaskStructuresDataTable)(this.Table));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Guid LT_UID
            {
                get
                {
                    return ((Guid)(this[this.tableLookupTableMaskStructures.LT_UIDColumn]));
                }
                set
                {
                    this[this.tableLookupTableMaskStructures.LT_UIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int LT_MASK_STRUCT_LEVEL
            {
                get
                {
                    return ((int)(this[this.tableLookupTableMaskStructures.LT_MASK_STRUCT_LEVELColumn]));
                }
                set
                {
                    this[this.tableLookupTableMaskStructures.LT_MASK_STRUCT_LEVELColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public byte LT_MASK_STRUCT_TYPE_ENUM
            {
                get
                {
                    try
                    {
                        return ((byte)(this[this.tableLookupTableMaskStructures.LT_MASK_STRUCT_TYPE_ENUMColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'LT_MASK_STRUCT_TYPE_ENUM\' in table \'LookupTableMaskStructur" +
                                "es\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableLookupTableMaskStructures.LT_MASK_STRUCT_TYPE_ENUMColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int LT_MASK_STRUCT_LENGTH
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableLookupTableMaskStructures.LT_MASK_STRUCT_LENGTHColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'LT_MASK_STRUCT_LENGTH\' in table \'LookupTableMaskStructures\'" +
                                " is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableLookupTableMaskStructures.LT_MASK_STRUCT_LENGTHColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public LookupTablesRow LookupTablesRow
            {
                get
                {
                    return ((LookupTablesRow)(this.GetParentRow(this.Table.ParentRelations["LookupTablesLookupTableMaskStructures"])));
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["LookupTablesLookupTableMaskStructures"]);
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsLT_MASK_STRUCT_TYPE_ENUMNull()
            {
                return this.IsNull(this.tableLookupTableMaskStructures.LT_MASK_STRUCT_TYPE_ENUMColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetLT_MASK_STRUCT_TYPE_ENUMNull()
            {
                this[this.tableLookupTableMaskStructures.LT_MASK_STRUCT_TYPE_ENUMColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsLT_MASK_STRUCT_LENGTHNull()
            {
                return this.IsNull(this.tableLookupTableMaskStructures.LT_MASK_STRUCT_LENGTHColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetLT_MASK_STRUCT_LENGTHNull()
            {
                this[this.tableLookupTableMaskStructures.LT_MASK_STRUCT_LENGTHColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public LookupTableMaskValuesRow[] GetLookupTableMaskValuesRows()
            {
                if ((this.Table.ChildRelations["LookupTableMaskStructuresLookupTableMaskValues"] == null))
                {
                    return new LookupTableMaskValuesRow[0];
                }
                else
                {
                    return ((LookupTableMaskValuesRow[])(base.GetChildRows(this.Table.ChildRelations["LookupTableMaskStructuresLookupTableMaskValues"])));
                }
            }
        }

        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class LookupTableMaskValuesRow : global::System.Data.DataRow
        {

            private LookupTableMaskValuesDataTable tableLookupTableMaskValues;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal LookupTableMaskValuesRow(global::System.Data.DataRowBuilder rb) :
                base(rb)
            {
                this.tableLookupTableMaskValues = ((LookupTableMaskValuesDataTable)(this.Table));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Guid LT_UID
            {
                get
                {
                    return ((Guid)(this[this.tableLookupTableMaskValues.LT_UIDColumn]));
                }
                set
                {
                    this[this.tableLookupTableMaskValues.LT_UIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string LT_MASK_VALUE_SEPARATOR
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableLookupTableMaskValues.LT_MASK_VALUE_SEPARATORColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'LT_MASK_VALUE_SEPARATOR\' in table \'LookupTableMaskValues\' i" +
                                "s DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableLookupTableMaskValues.LT_MASK_VALUE_SEPARATORColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int LT_MASK_STRUCT_LEVEL
            {
                get
                {
                    return ((int)(this[this.tableLookupTableMaskValues.LT_MASK_STRUCT_LEVELColumn]));
                }
                set
                {
                    this[this.tableLookupTableMaskValues.LT_MASK_STRUCT_LEVELColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int LCID
            {
                get
                {
                    return ((int)(this[this.tableLookupTableMaskValues.LCIDColumn]));
                }
                set
                {
                    this[this.tableLookupTableMaskValues.LCIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public LookupTableMaskStructuresRow LookupTableMaskStructuresRowParent
            {
                get
                {
                    return ((LookupTableMaskStructuresRow)(this.GetParentRow(this.Table.ParentRelations["LookupTableMaskStructuresLookupTableMaskValues"])));
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["LookupTableMaskStructuresLookupTableMaskValues"]);
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsLT_MASK_VALUE_SEPARATORNull()
            {
                return this.IsNull(this.tableLookupTableMaskValues.LT_MASK_VALUE_SEPARATORColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetLT_MASK_VALUE_SEPARATORNull()
            {
                this[this.tableLookupTableMaskValues.LT_MASK_VALUE_SEPARATORColumn] = global::System.Convert.DBNull;
            }
        }

        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class LookupTableStructuresRow : global::System.Data.DataRow
        {

            private LookupTableStructuresDataTable tableLookupTableStructures;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal LookupTableStructuresRow(global::System.Data.DataRowBuilder rb) :
                base(rb)
            {
                this.tableLookupTableStructures = ((LookupTableStructuresDataTable)(this.Table));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Guid LT_STRUCT_UID
            {
                get
                {
                    return ((Guid)(this[this.tableLookupTableStructures.LT_STRUCT_UIDColumn]));
                }
                set
                {
                    this[this.tableLookupTableStructures.LT_STRUCT_UIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Guid LT_UID
            {
                get
                {
                    return ((Guid)(this[this.tableLookupTableStructures.LT_UIDColumn]));
                }
                set
                {
                    this[this.tableLookupTableStructures.LT_UIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Guid LT_PARENT_STRUCT_UID
            {
                get
                {
                    try
                    {
                        return ((Guid)(this[this.tableLookupTableStructures.LT_PARENT_STRUCT_UIDColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'LT_PARENT_STRUCT_UID\' in table \'LookupTableStructures\' is D" +
                                "BNull.", e);
                    }
                }
                set
                {
                    this[this.tableLookupTableStructures.LT_PARENT_STRUCT_UIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string LT_STRUCT_COOKIE
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableLookupTableStructures.LT_STRUCT_COOKIEColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'LT_STRUCT_COOKIE\' in table \'LookupTableStructures\' is DBNul" +
                                "l.", e);
                    }
                }
                set
                {
                    this[this.tableLookupTableStructures.LT_STRUCT_COOKIEColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Guid APP_ENTITY_UID
            {
                get
                {
                    try
                    {
                        return ((Guid)(this[this.tableLookupTableStructures.APP_ENTITY_UIDColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'APP_ENTITY_UID\' in table \'LookupTableStructures\' is DBNull." +
                                "", e);
                    }
                }
                set
                {
                    this[this.tableLookupTableStructures.APP_ENTITY_UIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public LookupTableStructuresRow LookupTableStructuresRowParent
            {
                get
                {
                    return ((LookupTableStructuresRow)(this.GetParentRow(this.Table.ParentRelations["LookupTableStructuresLookupTableStructures"])));
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["LookupTableStructuresLookupTableStructures"]);
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public LookupTablesRow LookupTablesRow
            {
                get
                {
                    return ((LookupTablesRow)(this.GetParentRow(this.Table.ParentRelations["LookupTablesLookupTableStructures"])));
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["LookupTablesLookupTableStructures"]);
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsLT_PARENT_STRUCT_UIDNull()
            {
                return this.IsNull(this.tableLookupTableStructures.LT_PARENT_STRUCT_UIDColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetLT_PARENT_STRUCT_UIDNull()
            {
                this[this.tableLookupTableStructures.LT_PARENT_STRUCT_UIDColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsLT_STRUCT_COOKIENull()
            {
                return this.IsNull(this.tableLookupTableStructures.LT_STRUCT_COOKIEColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetLT_STRUCT_COOKIENull()
            {
                this[this.tableLookupTableStructures.LT_STRUCT_COOKIEColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsAPP_ENTITY_UIDNull()
            {
                return this.IsNull(this.tableLookupTableStructures.APP_ENTITY_UIDColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetAPP_ENTITY_UIDNull()
            {
                this[this.tableLookupTableStructures.APP_ENTITY_UIDColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public LookupTableValuesRow[] GetLookupTableValuesRows()
            {
                if ((this.Table.ChildRelations["LookupTableStructuresLookupTableValues"] == null))
                {
                    return new LookupTableValuesRow[0];
                }
                else
                {
                    return ((LookupTableValuesRow[])(base.GetChildRows(this.Table.ChildRelations["LookupTableStructuresLookupTableValues"])));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public LookupTableStructuresRow[] GetLookupTableStructuresRows()
            {
                if ((this.Table.ChildRelations["LookupTableStructuresLookupTableStructures"] == null))
                {
                    return new LookupTableStructuresRow[0];
                }
                else
                {
                    return ((LookupTableStructuresRow[])(base.GetChildRows(this.Table.ChildRelations["LookupTableStructuresLookupTableStructures"])));
                }
            }
        }

        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class LookupTableValuesRow : global::System.Data.DataRow
        {

            private LookupTableValuesDataTable tableLookupTableValues;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal LookupTableValuesRow(global::System.Data.DataRowBuilder rb) :
                base(rb)
            {
                this.tableLookupTableValues = ((LookupTableValuesDataTable)(this.Table));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Guid LT_STRUCT_UID
            {
                get
                {
                    return ((Guid)(this[this.tableLookupTableValues.LT_STRUCT_UIDColumn]));
                }
                set
                {
                    this[this.tableLookupTableValues.LT_STRUCT_UIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int LCID
            {
                get
                {
                    return ((int)(this[this.tableLookupTableValues.LCIDColumn]));
                }
                set
                {
                    this[this.tableLookupTableValues.LCIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Guid LT_UID
            {
                get
                {
                    try
                    {
                        return ((Guid)(this[this.tableLookupTableValues.LT_UIDColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'LT_UID\' in table \'LookupTableValues\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableLookupTableValues.LT_UIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int LT_VALUE_DUR
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableLookupTableValues.LT_VALUE_DURColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'LT_VALUE_DUR\' in table \'LookupTableValues\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableLookupTableValues.LT_VALUE_DURColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal LT_VALUE_NUM
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableLookupTableValues.LT_VALUE_NUMColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'LT_VALUE_NUM\' in table \'LookupTableValues\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableLookupTableValues.LT_VALUE_NUMColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public byte LT_VALUE_DUR_FMT
            {
                get
                {
                    try
                    {
                        return ((byte)(this[this.tableLookupTableValues.LT_VALUE_DUR_FMTColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'LT_VALUE_DUR_FMT\' in table \'LookupTableValues\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableLookupTableValues.LT_VALUE_DUR_FMTColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime LT_VALUE_DATE
            {
                get
                {
                    try
                    {
                        return ((global::System.DateTime)(this[this.tableLookupTableValues.LT_VALUE_DATEColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'LT_VALUE_DATE\' in table \'LookupTableValues\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableLookupTableValues.LT_VALUE_DATEColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string LT_VALUE_TEXT
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableLookupTableValues.LT_VALUE_TEXTColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'LT_VALUE_TEXT\' in table \'LookupTableValues\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableLookupTableValues.LT_VALUE_TEXTColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double LT_VALUE_DEFAULT_WEIGHT
            {
                get
                {
                    try
                    {
                        return ((double)(this[this.tableLookupTableValues.LT_VALUE_DEFAULT_WEIGHTColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'LT_VALUE_DEFAULT_WEIGHT\' in table \'LookupTableValues\' is DB" +
                                "Null.", e);
                    }
                }
                set
                {
                    this[this.tableLookupTableValues.LT_VALUE_DEFAULT_WEIGHTColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int LT_VALUE_DEFAULT_BACK_COLOR
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableLookupTableValues.LT_VALUE_DEFAULT_BACK_COLORColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'LT_VALUE_DEFAULT_BACK_COLOR\' in table \'LookupTableValues\' i" +
                                "s DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableLookupTableValues.LT_VALUE_DEFAULT_BACK_COLORColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int LT_VALUE_DEFAULT_FORE_COLOR
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableLookupTableValues.LT_VALUE_DEFAULT_FORE_COLORColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'LT_VALUE_DEFAULT_FORE_COLOR\' in table \'LookupTableValues\' i" +
                                "s DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableLookupTableValues.LT_VALUE_DEFAULT_FORE_COLORColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string LT_VALUE_PHONETIC
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableLookupTableValues.LT_VALUE_PHONETICColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'LT_VALUE_PHONETIC\' in table \'LookupTableValues\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableLookupTableValues.LT_VALUE_PHONETICColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string LT_VALUE_FULL
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableLookupTableValues.LT_VALUE_FULLColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'LT_VALUE_FULL\' in table \'LookupTableValues\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableLookupTableValues.LT_VALUE_FULLColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string LT_VALUE_DESC
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableLookupTableValues.LT_VALUE_DESCColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'LT_VALUE_DESC\' in table \'LookupTableValues\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableLookupTableValues.LT_VALUE_DESCColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal LT_VALUE_SORT_INDEX
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableLookupTableValues.LT_VALUE_SORT_INDEXColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'LT_VALUE_SORT_INDEX\' in table \'LookupTableValues\' is DBNull" +
                                ".", e);
                    }
                }
                set
                {
                    this[this.tableLookupTableValues.LT_VALUE_SORT_INDEXColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string LT_VALUE_LOCALIZED_COOKIE
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableLookupTableValues.LT_VALUE_LOCALIZED_COOKIEColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'LT_VALUE_LOCALIZED_COOKIE\' in table \'LookupTableValues\' is " +
                                "DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableLookupTableValues.LT_VALUE_LOCALIZED_COOKIEColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public LookupTableStructuresRow LookupTableStructuresRow
            {
                get
                {
                    return ((LookupTableStructuresRow)(this.GetParentRow(this.Table.ParentRelations["LookupTableStructuresLookupTableValues"])));
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["LookupTableStructuresLookupTableValues"]);
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsLT_UIDNull()
            {
                return this.IsNull(this.tableLookupTableValues.LT_UIDColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetLT_UIDNull()
            {
                this[this.tableLookupTableValues.LT_UIDColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsLT_VALUE_DURNull()
            {
                return this.IsNull(this.tableLookupTableValues.LT_VALUE_DURColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetLT_VALUE_DURNull()
            {
                this[this.tableLookupTableValues.LT_VALUE_DURColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsLT_VALUE_NUMNull()
            {
                return this.IsNull(this.tableLookupTableValues.LT_VALUE_NUMColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetLT_VALUE_NUMNull()
            {
                this[this.tableLookupTableValues.LT_VALUE_NUMColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsLT_VALUE_DUR_FMTNull()
            {
                return this.IsNull(this.tableLookupTableValues.LT_VALUE_DUR_FMTColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetLT_VALUE_DUR_FMTNull()
            {
                this[this.tableLookupTableValues.LT_VALUE_DUR_FMTColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsLT_VALUE_DATENull()
            {
                return this.IsNull(this.tableLookupTableValues.LT_VALUE_DATEColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetLT_VALUE_DATENull()
            {
                this[this.tableLookupTableValues.LT_VALUE_DATEColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsLT_VALUE_TEXTNull()
            {
                return this.IsNull(this.tableLookupTableValues.LT_VALUE_TEXTColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetLT_VALUE_TEXTNull()
            {
                this[this.tableLookupTableValues.LT_VALUE_TEXTColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsLT_VALUE_DEFAULT_WEIGHTNull()
            {
                return this.IsNull(this.tableLookupTableValues.LT_VALUE_DEFAULT_WEIGHTColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetLT_VALUE_DEFAULT_WEIGHTNull()
            {
                this[this.tableLookupTableValues.LT_VALUE_DEFAULT_WEIGHTColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsLT_VALUE_DEFAULT_BACK_COLORNull()
            {
                return this.IsNull(this.tableLookupTableValues.LT_VALUE_DEFAULT_BACK_COLORColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetLT_VALUE_DEFAULT_BACK_COLORNull()
            {
                this[this.tableLookupTableValues.LT_VALUE_DEFAULT_BACK_COLORColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsLT_VALUE_DEFAULT_FORE_COLORNull()
            {
                return this.IsNull(this.tableLookupTableValues.LT_VALUE_DEFAULT_FORE_COLORColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetLT_VALUE_DEFAULT_FORE_COLORNull()
            {
                this[this.tableLookupTableValues.LT_VALUE_DEFAULT_FORE_COLORColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsLT_VALUE_PHONETICNull()
            {
                return this.IsNull(this.tableLookupTableValues.LT_VALUE_PHONETICColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetLT_VALUE_PHONETICNull()
            {
                this[this.tableLookupTableValues.LT_VALUE_PHONETICColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsLT_VALUE_FULLNull()
            {
                return this.IsNull(this.tableLookupTableValues.LT_VALUE_FULLColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetLT_VALUE_FULLNull()
            {
                this[this.tableLookupTableValues.LT_VALUE_FULLColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsLT_VALUE_DESCNull()
            {
                return this.IsNull(this.tableLookupTableValues.LT_VALUE_DESCColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetLT_VALUE_DESCNull()
            {
                this[this.tableLookupTableValues.LT_VALUE_DESCColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsLT_VALUE_SORT_INDEXNull()
            {
                return this.IsNull(this.tableLookupTableValues.LT_VALUE_SORT_INDEXColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetLT_VALUE_SORT_INDEXNull()
            {
                this[this.tableLookupTableValues.LT_VALUE_SORT_INDEXColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsLT_VALUE_LOCALIZED_COOKIENull()
            {
                return this.IsNull(this.tableLookupTableValues.LT_VALUE_LOCALIZED_COOKIEColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetLT_VALUE_LOCALIZED_COOKIENull()
            {
                this[this.tableLookupTableValues.LT_VALUE_LOCALIZED_COOKIEColumn] = global::System.Convert.DBNull;
            }
        }

        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class LookupTableLanguagesRow : global::System.Data.DataRow
        {

            private LookupTableLanguagesDataTable tableLookupTableLanguages;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal LookupTableLanguagesRow(global::System.Data.DataRowBuilder rb) :
                base(rb)
            {
                this.tableLookupTableLanguages = ((LookupTableLanguagesDataTable)(this.Table));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Guid LT_UID
            {
                get
                {
                    return ((Guid)(this[this.tableLookupTableLanguages.LT_UIDColumn]));
                }
                set
                {
                    this[this.tableLookupTableLanguages.LT_UIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int LCID
            {
                get
                {
                    return ((int)(this[this.tableLookupTableLanguages.LCIDColumn]));
                }
                set
                {
                    this[this.tableLookupTableLanguages.LCIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public LookupTablesRow LookupTablesRow
            {
                get
                {
                    return ((LookupTablesRow)(this.GetParentRow(this.Table.ParentRelations["LookupTablesLookupTableLanguages"])));
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["LookupTablesLookupTableLanguages"]);
                }
            }
        }

        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class LookupTablesRowChangeEvent : global::System.EventArgs
        {

            private LookupTablesRow eventRow;

            private global::System.Data.DataRowAction eventAction;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public LookupTablesRowChangeEvent(LookupTablesRow row, global::System.Data.DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public LookupTablesRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }

        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class LookupTableMaskStructuresRowChangeEvent : global::System.EventArgs
        {

            private LookupTableMaskStructuresRow eventRow;

            private global::System.Data.DataRowAction eventAction;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public LookupTableMaskStructuresRowChangeEvent(LookupTableMaskStructuresRow row, global::System.Data.DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public LookupTableMaskStructuresRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }

        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class LookupTableMaskValuesRowChangeEvent : global::System.EventArgs
        {

            private LookupTableMaskValuesRow eventRow;

            private global::System.Data.DataRowAction eventAction;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public LookupTableMaskValuesRowChangeEvent(LookupTableMaskValuesRow row, global::System.Data.DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public LookupTableMaskValuesRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }

        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class LookupTableStructuresRowChangeEvent : global::System.EventArgs
        {

            private LookupTableStructuresRow eventRow;

            private global::System.Data.DataRowAction eventAction;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public LookupTableStructuresRowChangeEvent(LookupTableStructuresRow row, global::System.Data.DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public LookupTableStructuresRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }

        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class LookupTableValuesRowChangeEvent : global::System.EventArgs
        {

            private LookupTableValuesRow eventRow;

            private global::System.Data.DataRowAction eventAction;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public LookupTableValuesRowChangeEvent(LookupTableValuesRow row, global::System.Data.DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public LookupTableValuesRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }

        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class LookupTableLanguagesRowChangeEvent : global::System.EventArgs
        {

            private LookupTableLanguagesRow eventRow;

            private global::System.Data.DataRowAction eventAction;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public LookupTableLanguagesRowChangeEvent(LookupTableLanguagesRow row, global::System.Data.DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public LookupTableLanguagesRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
    }

   
}
